// <auto-generated />
using System;
using GamesNexus.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace GamesNexus.Data.Migrations
{
    [DbContext(typeof(GamesNexusDbContext))]
    [Migration("20230812193837_MovedTheSytemRequiremetsInsideTheGameEntity")]
    partial class MovedTheSytemRequiremetsInsideTheGameEntity
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("GamesNexus.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasMaxLength(190)
                        .HasColumnType("nvarchar(190)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("LastName")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Single-player"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Multi-player"
                        },
                        new
                        {
                            Id = 3,
                            Name = "LAN"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Co-op"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Local & party"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Online Competitive"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Free to Play"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Early Access"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Demos"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Cross-Platform Multiplayer"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Full controller support"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Tracked Controller Support"
                        },
                        new
                        {
                            Id = 13,
                            Name = "VR Only"
                        },
                        new
                        {
                            Id = 14,
                            Name = "VR Supported"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Includes level editor"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Remote Play on Phone/tablet"
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("DiscussionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 12, 19, 38, 37, 503, DateTimeKind.Utc).AddTicks(9732));

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("DiscussionId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Discussion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 12, 19, 38, 37, 503, DateTimeKind.Utc).AddTicks(9991));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Discussions");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Game", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("AdditionalNotes")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid?>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPU")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<string>("GPU")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RAM")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("ReleaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(1016));

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            AdditionalNotes = "SSD recommended, 60 FPS, 1920x1080 in ultra",
                            CPU = "AMD Ryzen 3 1200 or Intel Core i5-2500",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras tellus nunc, porttitor vel sapien eget, ornare tristique mauris. Donec diam neque, auctor et dui non.",
                            Developer = "Riot Games",
                            GPU = "4 GB VRAM, AMD Radeon R9 380 or NVIDIA GeForce GTX 960 DirectX: Version 12",
                            OS = "Windows 10 (20H1 version or newer, 64-bit versions)",
                            Price = 10.25m,
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            RAM = "8 GB RAM",
                            ReleaseDate = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(1776),
                            Storage = "90 GB available space",
                            Title = "League of Legends"
                        },
                        new
                        {
                            Id = 2L,
                            CPU = "Intel Core i5-2500K | AMD FX-8350",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque consectetur gravida orci in dapibus. Mauris pharetra efficitur nisi ut vehicula. Nulla dapibus faucibus gravida. Nunc a eleifend sem, at tempus ante. Nunc tincidunt laoreet nisl, at viverra mauris ultricies iaculis. Nullam dui leo, mattis eu rutrum sed, vehicula at odio.",
                            Developer = "Insomniac Games",
                            GPU = "NVIDIA GeForce GTX 960 (2 GB) | AMD Radeon RX 480",
                            OS = "Windows 7",
                            Price = 55.55m,
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            RAM = "8 GB RAM",
                            ReleaseDate = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(1808),
                            Storage = "40 GB available space",
                            Title = "Spyro"
                        },
                        new
                        {
                            Id = 3L,
                            CPU = "Intel® Core™ 2 Duo E6600 or AMD Phenom™ X3 8750 processor or better",
                            Description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla laoreet sagittis quam, et sollicitudin nulla.",
                            Developer = "Valve Corporation, Hidden Path Entertainment",
                            GPU = "Video card must be 256 MB or more and should be a DirectX 9-compatible with support for Pixel Shader 3.0",
                            OS = "Windows® 7/Vista/XP",
                            Price = 20m,
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            RAM = "2 GB RAM",
                            ReleaseDate = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(1811),
                            Storage = "15 GB available space",
                            Title = "CS:GO"
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameCategory", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("GamesCategories");

                    b.HasData(
                        new
                        {
                            GameId = 1L,
                            CategoryId = 2
                        },
                        new
                        {
                            GameId = 2L,
                            CategoryId = 1
                        },
                        new
                        {
                            GameId = 3L,
                            CategoryId = 2
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameGenre", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GamesGenres");

                    b.HasData(
                        new
                        {
                            GameId = 1L,
                            GenreId = 2
                        },
                        new
                        {
                            GameId = 1L,
                            GenreId = 1
                        },
                        new
                        {
                            GameId = 2L,
                            GenreId = 3
                        },
                        new
                        {
                            GameId = 2L,
                            GenreId = 1
                        },
                        new
                        {
                            GameId = 3L,
                            GenreId = 1
                        },
                        new
                        {
                            GameId = 3L,
                            GenreId = 5
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamesImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1L,
                            ImageUrl = "https://media.wired.co.uk/photos/606da9336ab54fce4fbb245f/master/w_1280,c_limit/lol_1.jpg"
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1L,
                            ImageUrl = "https://i.pinimg.com/564x/c5/6c/77/c56c774ee09e3e16bf12460dea765109.jpg"
                        },
                        new
                        {
                            Id = 3,
                            GameId = 2L,
                            ImageUrl = "https://cdn.mobygames.com/covers/7240915-spyro-reignited-trilogy-xbox-one-front-cover.jpg"
                        },
                        new
                        {
                            Id = 4,
                            GameId = 3L,
                            ImageUrl = "https://fanspace.gg/wp-content/uploads/2022/12/csgo-1-1024x576.jpg"
                        },
                        new
                        {
                            Id = 5,
                            GameId = 3L,
                            ImageUrl = "https://estnn.com/wp-content/uploads/2021/04/csgoft2.jpg.webp"
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameVideo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GamesVideos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1L,
                            VideoUrl = "https://www.leagueoflegends.com/static/hero-0632cbf2872c5cc0dffa93d2ae8a29e8.webm"
                        },
                        new
                        {
                            Id = 2,
                            GameId = 2L,
                            VideoUrl = "https://cdn.akamai.steamstatic.com/steam/apps/256752581/movie480.webm?t=1560272971"
                        },
                        new
                        {
                            Id = 3,
                            GameId = 3L,
                            VideoUrl = "https://cdn.cloudflare.steamstatic.com/steam/apps/81958/movie480.webm?t=1554409259"
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 5,
                            Name = "First-Person Shooter"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Arcade & Rhythm"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Third-Person Shooter"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Platformer & Runner"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Hack & Slash"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Farming & Crafting"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Rogue-Like"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Strategy RPG"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Turn-Based"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Card & Board"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Tower Defense"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 17,
                            Name = "All Sports"
                        },
                        new
                        {
                            Id = 18,
                            Name = "Racing"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Racing Sim"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Sports Sim"
                        },
                        new
                        {
                            Id = 21,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 22,
                            Name = "Open world"
                        },
                        new
                        {
                            Id = 23,
                            Name = "Survival"
                        },
                        new
                        {
                            Id = 24,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 25,
                            Name = "Space & Flight"
                        },
                        new
                        {
                            Id = 26,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 27,
                            Name = "Battle Royale"
                        },
                        new
                        {
                            Id = 28,
                            Name = "MOBA"
                        },
                        new
                        {
                            Id = 29,
                            Name = "MMO"
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("PublishedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2694));

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec interdum dictum pellentesque. In orci sem, iaculis a dolor vitae, pellentesque placerat odio. Vivamus tincidunt ex ipsum, eu elementum tortor scelerisque quis. Sed faucibus malesuada eros. Integer vitae imperdiet lectus. Ut fermentum placerat mi ut suscipit. Mauris nec viverra velit.Interdum et malesuada fames ac ante ipsum primis in faucibus. Nulla pulvinar lobortis turpis, ac porttitor nulla consectetur in. In id nibh sem. Donec ut semper sem. Phasellus pharetra faucibus sapien nec .",
                            PublishedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2744),
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            Title = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ligula leo, pulvinar sed ullamcorper et, laoreet in odio."
                        },
                        new
                        {
                            Id = 2,
                            Content = "Lorem ipsum dolor, consectetur adipiscing elit. Donec interdum dictum pellentesque. In orci sem, iaculis a dolor vitae, pellentesque placerat odio. Vivamus tincidunt ex ipsum, eu elementum tortor scelerisque quis. Sed faucibus malesuada eros. Integer vitae imperdiet lectus. Ut fermentum placerat mi ut suscipit. Mauris nec viverra velit. Nulla pulvinar lobortis turpis, ac porttitor nulla consectetur in. In id nibh sem. Donec ut semper sem. Phasellus pharetra faucibus sapien nec .",
                            PublishedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2748),
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            Title = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ligula leo, pulvinar sed ullamcorper et, laoreet in odio. Phasellus elementum."
                        },
                        new
                        {
                            Id = 3,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec interdum dictum pellentesque. In orci sem, iaculis a dolor vitae, pellentesque placerat odio. Vivamus tincidunt ex ipsum, eu elementum tortor scelerisque quis. Sed faucibus malesuada eros. Integer vitae imperdiet lectus. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nulla pulvinar lobortis turpis, ac porttitor nulla consectetur in. In id nibh sem. Donec ut semper sem. Phasellus pharetra faucibus sapien nec .",
                            PublishedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2749),
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            Title = "Lorem ipsum dolor sit amet, consectetur adipiscing elit.Leo, pulvinar sed ullamcorper et, laoreet in odio. Phasellus elementum."
                        },
                        new
                        {
                            Id = 4,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec interdum dictum pellentesque. In orci sem, iaculis a dolor vitae, pellentesque placerat odio. Vivamus tincidunt ex ipsum, eu elementum tortor scelerisque quis. Integer vitae imperdiet lectus. Ut fermentum placerat mi ut suscipit. Mauris nec viverra velit.Interdum et malesuada fames ac ante ipsum primis in faucibus. Nulla pulvinar lobortis turpis, ac porttitor nulla consectetur in. In id nibh sem. Donec ut semper sem. Phasellus pharetra faucibus sapien nec .",
                            PublishedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2750),
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            Title = "Lorem ipsum dolor sit amet. Phasellus ligula leo laoreet in odio. Phasellus elementum."
                        },
                        new
                        {
                            Id = 5,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. In orci sem, iaculis a dolor vitae, pellentesque placerat odio. Vivamus tincidunt ex ipsum, eu elementum tortor scelerisque quis. Sed faucibus malesuada eros. Integer vitae imperdiet lectus. Ut fermentum placerat mi ut suscipit. Mauris nec viverra velit. Malesuada fames ac ante ipsum primis in faucibus. Nulla pulvinar lobortis turpis, ac porttitor nulla consectetur in. In id nibh sem. Donec ut semper sem. Phasellus pharetra faucibus sapien nec .",
                            PublishedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2752),
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            Title = "Consectetur adipiscing elit. Phasellus ligula leo, pulvinar sed ullamcorper et, laoreet in odio. Phasellus elementum."
                        },
                        new
                        {
                            Id = 6,
                            Content = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nterdum dictum pellentesque. In orci sem, iaculis a dolor vitae, pellentesque placerat odio. Vivamus tincidunt ex ipsum, eu elementum tortor scelerisque quis. Sed faucibus malesuada eros. Integer vitae imperdiet lectus. Ut fermentum placerat mi ut suscipit. Mauris nec viverra velit.Interdum et malesuada fames ac ante ipsum primis in faucibus. Nulla pulvinar lobortis turpis In id nibh sem. Donec ut semper sem. Phasellus pharetra faucibus sapien nec .",
                            PublishedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2753),
                            PublisherId = new Guid("dae07e76-9f5d-4bfb-800b-c0dfb0efec5b"),
                            Title = "Laoreet in odio. Phasellus elementum."
                        });
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(2855));

                    b.Property<decimal>("TotalPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.OrderDetail", b =>
                {
                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.HasKey("GameId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BusinessEmail")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("nvarchar(320)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WebsiteURL")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(1600)
                        .HasColumnType("nvarchar(1600)");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PostedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4506));

                    b.Property<int>("Rating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("GameId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationUserId = new Guid("875b63f6-4c14-4757-bbc5-149615044a6f"),
                            Comment = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer suscipit porttitor dolor vel sagittis. Integer vulputate fringilla finibus.",
                            GameId = 1L,
                            PostedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4636),
                            Rating = 1
                        },
                        new
                        {
                            Id = 2,
                            ApplicationUserId = new Guid("19659aed-ed83-474b-9cb7-13e6140b8c3a"),
                            Comment = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed varius tempor sapien at rhoncus. Donec finibus lacinia eros at iaculis. Praesent tincidunt dui lorem, in convallis urna varius vel. Etiam vehicula eros finibus sapien tincidunt, at luctus sem tristique. Aenean quis eros lobortis est tempus porta. Phasellus sed dui in neque hendrerit tempor eu a turpis. Sed blandit mi eget magna eleifend commodo. Phasellus cursus purus a mi eleifend vehicula. In aliquam leo eu suscipit interdum. Aliquam quis ipsum in urna tristique viverra a et lectus. Vivamus metus nulla, cursus sit amet augue ac, egestas rutrum enim.",
                            GameId = 1L,
                            PostedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4640),
                            Rating = 2
                        },
                        new
                        {
                            Id = 3,
                            ApplicationUserId = new Guid("43ba6e1e-95b7-4f93-8324-a1f0300412d5"),
                            Comment = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec dictum, diam quis lobortis facilisis, neque nisi pulvinar eros, ac porta lectus velit eu lacus. Sed posuere sapien vitae magna imperdiet, scelerisque tempor mi condimentum. Aliquam erat volutpat. Cras dolor elit, pharetra sit amet tristique.",
                            GameId = 1L,
                            PostedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4642),
                            Rating = 2
                        },
                        new
                        {
                            Id = 4,
                            ApplicationUserId = new Guid("875b63f6-4c14-4757-bbc5-149615044a6f"),
                            Comment = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec dictum, diam quis lobortis facilisis, neque nisi pulvinar eros, ac porta lectus velit eu lacus. Sed posuere sapien vitae magna imperdiet, scelerisque tempor mi condimentum. Aliquam erat volutpat. Cras dolor elit, pharetra sit amet.",
                            GameId = 2L,
                            PostedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4644),
                            Rating = 1
                        },
                        new
                        {
                            Id = 5,
                            ApplicationUserId = new Guid("b33dcf98-79e3-4aea-bb2b-923601190998"),
                            Comment = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris molestie et nisi nec tempus. Fusce quis aliquet nisl. Nullam volutpat, sapien et accumsan vulputate, leo ligula convallis nulla, id hendrerit dolor tortor quis odio. Aenean pellentesque sagittis lacinia. Sed accumsan porttitor leo, sit amet ullamcorper sem molestie nec. Aenean maximus a diam at mattis. Donec in velit pellentesque mauris pretium fringilla ut ac erat.Etiam facilisis sapien sapien, et finibus sapien pretium id. Duis congue magna a lectus accumsan, sed ullamcorper leo tempor. Vestibulum vel efficitur magna, feugiat venenatis turpis. Etiam vulputate eros quis purus commodo auctor ut quis felis. Cras mollis tristique massa, sit amet semper elit varius eget. Donec eget diam id tortor aliquam sollicitudin ut nec ligula. Donec hendrerit augue id tortor iaculis bibendum. Aenean vulputate ante ut tincidunt aliquam.Donec vitae lacinia nisl, at sollicitudin metus. Sed pellentesque imperdiet eleifend. Integer scelerisque viverra nisl, ac imperdiet magna aliquam vel. Quisque in convallis dui. Pellentesque feugiat justo vitae mauris suscipit, sed malesuada tortor dapibus. Proin nec est aliquam, vulputate lectus sed, tristique velit. Maecenas quam orci, euismod at ultrices ac, pulvinar sed massa. Ut iaculis quis elementum. Nam vel dapibus nunc, vel ultricies ipsum. In.",
                            GameId = 3L,
                            PostedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4646),
                            Rating = 1
                        },
                        new
                        {
                            Id = 6,
                            ApplicationUserId = new Guid("875b63f6-4c14-4757-bbc5-149615044a6f"),
                            Comment = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus dapibus consequat eros eu sodales. Sed vel enim et risus tempor dignissim non et sem. Phasellus suscipit mi nibh, at ultricies odio blandit a. Cras posuere, ante sed egestas pretium, leo erat ullamcorper nisi, et condimentum ligula ligula vitae urna. Proin vel nunc iaculis, ornare libero et, mollis quam. Maecenas eu dui odio. Morbi mi mauris, consectetur vel est in, iaculis elementum sapien. Nulla luctus bibendum nisl, in pellentesque dolor.",
                            GameId = 3L,
                            PostedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4648),
                            Rating = 2
                        },
                        new
                        {
                            Id = 7,
                            ApplicationUserId = new Guid("43ba6e1e-95b7-4f93-8324-a1f0300412d5"),
                            Comment = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus dapibus consequat eros eu sodales. Sed vel enim et risus tempor dignissim non et sem. Phasellus suscipit mi nibh, at ultricies odio blandit a. Cras posuere, ante sed egestas pretium, leo erat ullamcorper nisi, et condimentum ligula ligula vitae urna. Proin vel nunc iaculis, ornare libero et, mollis quam. Maecenas eu dui odio. Morbi mi mauris, consectetur vel est in, iaculis elementum sapien. Nulla luctus bibendum nisl, in pellentesque dolor.",
                            GameId = 3L,
                            PostedOn = new DateTime(2023, 8, 12, 19, 38, 37, 504, DateTimeKind.Utc).AddTicks(4649),
                            Rating = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Comment", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GamesNexus.Data.Models.Discussion", "Discussion")
                        .WithMany("Comments")
                        .HasForeignKey("DiscussionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Discussion");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Discussion", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Discussions")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Game", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("WishlistGames")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GamesNexus.Data.Models.Publisher", "Publisher")
                        .WithMany("PublishedGames")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameCategory", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.Category", "Category")
                        .WithMany("GamesCategories")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesNexus.Data.Models.Game", "Game")
                        .WithMany("GamesCategories")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameGenre", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.Game", "Game")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesNexus.Data.Models.Genre", "Genre")
                        .WithMany("GamesGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameImage", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.Game", "Game")
                        .WithMany("Images")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.GameVideo", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.Game", "Game")
                        .WithMany("Videos")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.News", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.Publisher", "Publisher")
                        .WithMany("News")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Order", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.OrderDetail", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.Game", "Game")
                        .WithMany("OrderDetail")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GamesNexus.Data.Models.Order", "Order")
                        .WithMany("OrderDetail")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Publisher", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Review", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Reviews")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("GamesNexus.Data.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("GamesNexus.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GamesNexus.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Discussions");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("WishlistGames");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Category", b =>
                {
                    b.Navigation("GamesCategories");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Discussion", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Game", b =>
                {
                    b.Navigation("GamesCategories");

                    b.Navigation("GamesGenres");

                    b.Navigation("Images");

                    b.Navigation("OrderDetail");

                    b.Navigation("Reviews");

                    b.Navigation("Videos");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Genre", b =>
                {
                    b.Navigation("GamesGenres");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Order", b =>
                {
                    b.Navigation("OrderDetail");
                });

            modelBuilder.Entity("GamesNexus.Data.Models.Publisher", b =>
                {
                    b.Navigation("News");

                    b.Navigation("PublishedGames");
                });
#pragma warning restore 612, 618
        }
    }
}
